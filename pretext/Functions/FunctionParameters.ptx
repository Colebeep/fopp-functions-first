<?xml version="1.0"?>
<section xml:id="functions_function-parameters">
  <title>Function Parameters</title>
  <p>Named functions are very useful because, once they are defined and we understand what they do, we can
    refer to them by name
    and no longer have to think too much about their inner workings. With parameters, functions are even more powerful,
    because they allow us to generalize a function's actions so that it can do the same thing on each invocation, 
    but with different starting values. </p>
  <p>The figure below shows this relationship. A function needs certain information to do its specific work.
    These values, often called <term>arguments</term> or <term>actual parameters</term> or <term>parameter
    values</term>, are <em>passed</em> to the function by the program that invokes the function.</p>
  <image source="Functions/Figures/blackboxproc.png" width="50%" />
  <p>This type of diagram is often called a <term>black-box diagram</term> because it only states
    the requirements from the perspective of the 'user' (well, the programmer, but the programmer who
    writes the code that uses the function, who may be different than the programmer who created the function - which, by the way, is why docstrings are 
    so useful to explain a function). The 'user'
    must know the name of the function and what arguments it needs to be passed. The details of how the
    function works are hidden inside the <q>black-box</q>.</p>
  <p>You have already been making function invocations with parameters. For example, when you write <c>
    len("abc")</c>, len is the name of a function, and the value that you put inside the
    parentheses, the string <q>abc</q> is a parameter value.Or <c>print("Answer", 3 - 4, sep=" is equal to ") where the print function is passed three
    parameters, one of which is named.</p>
  <p>When a function has one or more parameters, the names of the parameters appear in the function
    definition, separated by commas, and the
    values to assign to those parameters appear inside the parentheses of the function invocation in the same order and again separated by commas.
    Let's look at each of
    those a little more carefully.</p>
  <p>In the definition, the <term>parameter list</term> is sometimes referred to as the <term>formal parameters</term>
    or <term>parameter names</term>. These names can be any valid variable name.</p>
  <p>In the function invocation, inside the parentheses one value should be provided for each of the
    parameter names. These
    <term>arguments</term> can be specified either directly (<c>"abc"</c>), or by any Python
    expression (e.g. <c>3 - 4</c>) including a
    reference to some other variable or function name (<c>abs(3 - 4)</c>).</p>
  <p>That can get kind of confusing, so let's start by looking at a function with just one
    parameter. The revised hello
    function personalizes the greeting: the person to greet is specified by the parameter.</p>
  <program xml:id="clens4_4_1" interactive="codelens" language="python">
    <input>
      def hello2(who: str) -&gt; None:
        print("Hello " + who)
        print("Glad to meet you")

      hello2("Iman")
      hello2("Jackie" + " " + "Chan")
    </input>
  </program>
  <p>First, notice that hello2 has one formal parameter, <c>who</c>. You can tell that because
    there is exactly one variable name inside the parentheses on line 1 
    (the colon and the 'str' are part of Type Annotation, a topic we will discuss shortly).</p>
  <p>Next, notice what happened during Step 2. Control was passed to the function, just like we saw
    before. But in addition, the variable<c>who</c> was bound to a value, the string <q>Iman</q>. When it
    got to Step 7, for the second invocation of the function, <c>who</c> was bound to <q>Jackie + ' ' + Chan</q>.</p>
  <p>Function invocations always work that way. The expression inside the parentheses on the line
    that invokes the function
    is evaluated before control is passed to the function. The value is assigned to the
    corresponding formal parameter.
    Then, when the code block inside the function is executing, it can refer to that formal
    parameter and get its value,
    the value that was <em>passed into</em> the function.</p>
  <exercise runestone="eval4_4_1" />
  <p>To get a feel for that, let's invoke hello2 using some more complicated expressions. Try some
    of your own, too.</p>
  <program xml:id="ac4_4_1" interactive="activecode" language="python">
    <input>
      def hello2(who: str) -&gt; None:
        print("Hello " + who)
        print("Glad to meet you")

      hello2("Iman" + " and Jackie")
      hello2("Class " * 3)
    </input>
  </program>
  <p>Now let's consider a function with two parameters. This version of hello takes
    a parameter that controls how many times the greeting will be printed.</p>
  <program xml:id="clens4_4_2" interactive="codelens" language="python">
    <input>
      def hello3(who: str, n: int) -&gt; None:
        greeting = f"Hello {who} "
        print(greeting*n)

      hello3("Wei", 4)
      hello3("", 1)
      hello3("Kitty", 11)
    </input>
  </program>
  <p>At Step 2 of the execution, in the first invocation of hello3, notice that the variable <c>who</c> is
    bound to the value <q>Wei</q> and the variable <c>n</c> is bound to the value 4.</p>
  <p>That's how function invocations always work. Each of the expressions, separated by commas, that
    are inside the
    parentheses are evaluated to produce values. Then those values are matched up positionally (in the same order)
    with the formal parameters. The first parameter name is bound to the first value
    provided. The second parameter name is bound to the second value provided. And so on.
    </p>
    <p>
    <em>Try defining a similar function as the above on your own, but when your code invokes the function place the arguments in the reverse order: 4, "Wei".
    What happens when you run the code? It should produce a'run-time' error: the code is syntactic (correct) but the function's code
    can't deal with the variables being of a different than expected data type.</em></p>
  <p>
    <term>Check your understanding</term>
  </p>
  <exercise label="question4_4_1">
    <statement>
      <p>Which of the following is a valid function header (first line of a function definition)?</p>
    </statement>
    <choices>
      <choice correct="yes">
        <statement>
          <p>def greet(t: str) -&gt; None:</p>
        </statement>
        <feedback>
          <p>A function may take zero or more parameters. In this case it has one.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>def greet:</p>
        </statement>
        <feedback>
          <p>A function needs to specify its parameters in its header. If there are no paramters,
            put () after the function name.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>greet(t: str, n: int) -&gt; None:</p>
        </statement>
        <feedback>
          <p>A function definition needs to include the keyword def.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>def greet(t: str, n: int) -&gt; None</p>
        </statement>
        <feedback>
          <p>A function definition header must end in a colon (:).</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="question4_4_2">
    <statement>
      <p>What is the name of the following function?</p>
      <program language="python">
        <input>
          def print_many(x: str, y: int) -&gt; None:
            """Print out string x, y times."""
            message = x * y
            print(message)
        </input>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>def print_many(x: str, y: int) -&gt; None:</p>
        </statement>
        <feedback>
          <p>This line is the complete function header (except for the semi-colon) which includes
            the name as well as several other components.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>print_many</p>
        </statement>
        <feedback>
          <p>Yes, the name of the function is given after the keyword def and before the list of
            parameters.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>print_many(x: str, y: int)</p>
        </statement>
        <feedback>
          <p>This includes the function name and its parameters</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>Print out string x, y times.</p>
        </statement>
        <feedback>
          <p>This is a comment stating what the function does.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="question4_4_3">
    <statement>
      <p>What are the parameters of the following function?</p>
      <program language="python">
        <input>
          def print_many(x: str, y: int) -&gt; None:
            """Print out string x, y times."""
            message = x * y
            print(message)
        </input>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>i</p>
        </statement>
        <feedback>
          <p>i is a variable used inside of the function, but not a parameter, which is passed in to
            the function.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>x</p>
        </statement>
        <feedback>
          <p>x is only one of the parameters to this function.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>x, y</p>
        </statement>
        <feedback>
          <p>Yes, the function specifies two parameters: a string x and an int y.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>x, y, i</p>
        </statement>
        <feedback>
          <p>the parameters include only those variables whose values that the function expects to
            receive as input. They are specified in the header of the function.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="question4_4_4">
    <statement>
      <p>Considering the function below, which of the following statements correctly invokes, or
        calls, this function (i.e., causes it to run)?</p>
      <program language="python">
        <input>
          def print_many(x: str, y: int) -&gt; None:
            """Print out string x, y times."""
            message = x * y
            print(message)

          z = 3
        </input>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>print_many(x, y)</p>
        </statement>
        <feedback>
          <p>No, x and y are the names of the formal parameters to this function. When the function
            is called, it requires actual values to be passed in.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>print_many</p>
        </statement>
        <feedback>
          <p>A function call always requires parentheses after the name of the function.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>print_many("Greetings")</p>
        </statement>
        <feedback>
          <p>This function takes two parameters (arguments)</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>print_many("Greetings", 10):</p>
        </statement>
        <feedback>
          <p>A colon is only required in a function definition. It will cause an error with a
            function call.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>print_many("Greetings", z)</p>
        </statement>
        <feedback>
          <p>Since z has the value 3, we have passed in two correct values for this function.
            "Greetings" will be printed 3 times.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <!-- <exercise label="question11_3_x">
    <statement>
      <p>True or false: A function can be called several times by placing a function call in the
        body of a for loop.</p>
    </statement>
    <choices>
      <choice correct="yes">
        <statement>
          <p>True</p>
        </statement>
        <feedback>
          <p>Yes, you can call a function multiple times by putting the call in a loop.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>False</p>
        </statement>
        <feedback>
          <p>One of the purposes of a function is to allow you to call it more than once. Placing it
            in a loop allows it to executed multiple times as the body of the loop runs multiple
            times.</p>
        </feedback>
      </choice>
    </choices>
  </exercise> -->
  <exercise label="question4_4_5">
    <statement>
      <p>What output will the following code produce?</p>
      <program language="python">
        <input>
          def cyu(n1: int, n2: int) -&gt; int:
            CONSTANT_VALUE = -8
            return n1 + n2 - CONSTANT_VALUE

          cyu(4, 3)
        </input>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>7</p>
        </statement>
        <feedback>
          <p>
            n3 was given a value; it would be included in the returned value.
          </p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>15</p>
        </statement>
        <feedback>
          <p>4 + 3 - (-8) is 15.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>-1</p>
        </statement>
        <feedback>
          <p>n3 is a negative number that is subtracted
            from the sum of n1 and n2.
          </p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>The function would produce an error.</p>
        </statement>
        <feedback>
          <p>This code contains no errors.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
</section>
