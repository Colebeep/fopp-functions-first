<?xml version="1.0"?>
<section xml:id="functions_variables-and-parameters-are-local">
  <title>Variables and parameters are local</title>
  <p>As has been discussed previously, when we use variables we have to first use assignment statements to create and give them value. Similarly, 
  we define functions in the code before the code can invoke them. Computer science uses the term <term>scope</term> to describe 
  where/when an identified item (like a variable, a function etc.) is recognizable and accessible. Calling a function or using a variable before
  its definition or assignment will trigger a runtime error because the item is outside of the program's scope at that moment.</p>
  <p>Scope becomes an even more important issue when large problems are decomposed with functions. Within
  a function, its parameters (and any other variable assigned a value in the function's body) can only be accessed by code within the same scope.
  These <term>local variables</term> only exists inside the function and you cannot use them outside of them. For example, consider the following version of the <c>square</c> function:</p>

  <note>
    <p>We've ommitted the docstring, type annotations, and have used non-self-documenting names in the following example on purpose,
    to put you into a similar position as the code's interpreter - it can only 'do' what the code tells it to 
    and cannot 'know' what it is supposed to do. But it will follow the scope rules.</p>
  </note>
  <program xml:id="ac4_8_1" interactive="activecode" language="python">
    <input>
def square(x):
    y = x * x
    return y

z = square(10)
print(y)
print(x)
print(z)

        </input>
  </program>
  
  <p><em>Examine the code on your own first. Make note of which variables are 'inside' the function's scope.</em></p>
  <p><em>Show in Codelens</em> and step through the code with the <c>Next</c>&gt; button (follow the <term>flow of execution</term>). Codelens, 
    indicates the scope of the variables with 'Frame' boxes. Variables that become active, those who's scope is <alert>local</alert> to the function, will be placed in a named box, and
    <term>global variables</term>, those variables assigned values outside of the function, will stay in the global frame.</p>
    <p>Go through the steps until you see an error message. When we try to access <c>y</c> on line 6 (outside the
            function's scope) Python looks for a global variable named <c>y</c> but does not find one. This results in the runtime error:
            <c>Name Error: 'y' is not defined.</c></p>
  <p> <em>This is neither a syntax nor a semantic error - line 6 is syntactic and the algorithm is valid </em> however...</p>

  <p>The local variable <c>y</c> only exists while the function is being executed &#x2014; we call this its <term>lifetime</term>. When the
            execution of the function terminates (returns), the local variables are destroyed and the code passes outside of the function's scope. 
            CodeLens helps you visualize this because the function's local variables disappear after the function returns to the function caller's scope (line5). 
            Go back and step through the statements again, paying
            particular attention to the variables that are created when the function is called and note when they are subsequently
            destroyed with the function's return.</p>

  <p>Within CodeLens, use <c>Edit this code</c> to delete line 6 <c>print(y)</c> and take a moment to work out for yourself what will now happen.
  Then <c>Visualize Execution</c> and proceed through all the steps. <em>What happened? Why?</em></p>

  <p>By tracing the algorithm (the <term>flow of execution</term>) and the CodeLens fames, you will see that formal parameters are also local variables; 
  their scope is limited to within their function.</p>
  <p>For example, after a function is called, the scope of the local variables <c>x</c> and <c>y</c> exist with the function's invocation (line 6 invoking line 1). And, 
    the lifetime of those parameters ends when the function completes its execution and the scope passes back to the calling instruction (line 3's <c>return</c> to line 6).</p>

  <p><note>When a function assigns and uses a local variable, upon completing its execution, it is not possible to recover that local variable the next time it is called.
      Each call of the function creates new local variables, and their lifetimes expire when the function returns to the caller's scope.</note></p>
      <p><em>Try stepping through the code and any time there is an error, <c>Edit this code</c> to fix the <em>runtime error</em>.</p>
  <p>
    <term>Check Your Understanding</term>
  </p>
  <exercise label="question4_8_1">
    <statement>
      <p>True or False: Local variables can be referenced outside of the function they were defined in.</p>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>True</p>
        </statement>
        <feedback>
          <p>Local variables cannot be referenced outside of the function they were defined in.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>False</p>
        </statement>
        <feedback>
          <p>Local variables cannot be referenced outside of the function they were defined in.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <!-- <exercise label="question4_8_2">
    <statement>
      <p>Which of the following are local variables? Please, write them in order of what line they are on in the code. <var/>  <var/>  </p>
    </statement>
    <setup>
      <var>
        <program language="python">
          <input>
numbers = "1, 12, 13, 4"
def foo(bar):
    aug = str(bar) + "street"
    return aug

addresses = []
for item in numbers:
    addresses.append(foo(item))
</input>
        </program>
        <p>The local variables are</p>
        <condition string="^\s*bar\s*$">
          <feedback>
            <p>Good work!</p>
          </feedback>
        </condition>
        <condition string="^\s*aug\s*$">
          <feedback>
            <p>While aug is a local variable, it is not the first one in the code.</p>
          </feedback>
        </condition>
      </var>
      <var>
        <condition string="^\s*item\s*$">
          <feedback>
            <p>item is not a local variable.</p>
          </feedback>
        </condition>
        <condition string="^\s*.*\s*$">
          <feedback>
            <p>Incorrect, try again.</p>
          </feedback>
        </condition>
        <condition string="^\s*aug\s*$">
          <feedback>
            <p>Good work!</p>
          </feedback>
        </condition>
        <condition string="^\s*bar\s*$">
          <feedback>
            <p>While bar is a local variable, it is not the first one in the code.</p>
          </feedback>
        </condition>
      </var>
    </setup>
  </exercise> -->
  <exercise label="question4_8_2">
    <statement>
      <p>What would be the result of running the following code?</p>
      <program language="python">
        <input>
x = 3 * 2
y = 1

def subtract(z):
    y = 10
    return y - z

print(subtract(x))
</input>
      </program>
    </statement>
    <choices>
      <choice correct="yes">
        <statement>
          <p>4</p>
        </statement>
        <feedback>
          <p>Correct, the output is right because the subtract function takes in x as the global variable for the z parameter and puts it into the function. The subtract function uses the local variable y for its return.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>6</p>
        </statement>
        <feedback>
          <p>Incorrect, look again at what is being produced in the subtract function.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>10</p>
        </statement>
        <feedback>
          <p>Incorrect, look again at what is being produced in the subtract function.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>Code will give an error because x and z do not match.</p>
        </statement>
        <feedback>
          <p>Incorrect, there shouldn't be any error.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="question4_8_3">
    <statement>
      <p>What would be the result of running the following code?</p>
      <program language="python">
        <input>
def adding(x):
    y = 3
    z = y + x + x
    return z

def producing(x):
    z = x * y
    return z

print(producing(adding(4)))
</input>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>33</p>
        </statement>
        <feedback>
          <p>Incorrect, look again at what is happening in producing.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>12</p>
        </statement>
        <feedback>
          <p>Incorrect, look again at what is happening in producing.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>There is an error in the code.</p>
        </statement>
        <feedback>
          <p>Yes! There is an error because we reference y in the producing function, but it was defined in adding. Because y is a local variable, we can't use it in both functions without initializing it in both. If we initialized y as 3 in both though, the answer would be 33.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="question4_8_4">
    <statement>
      <p>What would be the result of running the following code?</p>
      <program language="python">
        <input>
x = 9

def adding():
    x+=1
    print(x)

adding()
</input>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>1</p>
        </statement>
        <feedback>
          <p>Incorrect, pay attention to the local scope in the function.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>9</p>
        </statement>
        <feedback>
          <p>Incorrect, pay attention to the local scope in the function.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>10</p>
        </statement>
        <feedback>
          <p>Incorrect, pay attention to the local scope in the function.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>Error, local variable 'x' is referenced before assignment.</p>
        </statement>
        <feedback>
          <p>This code gives an error because the local variable 'x' was referenced in the local scope before it was assigned a value.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  
  <p>In the code below, notice and interpret the different error messages produced when each is run.</p>
  <ul>
    <li>
      <p><alert>NameError:</alert> Local variables cannot be used (add one to 'existing value') if it does not yet have a value.</p>
      <p>In a similar way, a function is not defined before its function header.</p>
    </li>
     <li>
      <p>Local variables used within functions exist within the scope of that function, but 
      they are considered <term>unbound</term> if they don't have a valid assignment statement.
      </p>
    </li>
  </ul>
  <p>
    <program language="python">
      <input>
      v1 += 1

      NameError: name 'v1' is not defined

        </input>
    </program>
  </p>
  <p>
    <program language="python">
      <input>
        foo()
        
        def foo():
            v1 += 1
        
        NameError: name 'foo' is not defined
      </input>
    </program>
  </p>

  <p>
  <program language="python">
    <input>
      def foo():
        v1 += 1
      foo()
      
      UnboundLocalError: local variable 'v1' referenced before assignment
</input>
  </program>
  </p>
  <p>Take a moment to work out how to 'fix' these runtime errors.</p>
</section>
